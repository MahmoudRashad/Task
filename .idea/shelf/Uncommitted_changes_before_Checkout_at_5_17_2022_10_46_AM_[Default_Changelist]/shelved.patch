Index: presentaion/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n    id 'kotlin-android'\r\n    id 'kotlin-kapt'\r\n    id 'kotlin-parcelize'\r\n    id 'androidx.navigation.safeargs'\r\n    id 'com.google.gms.google-services'\r\n    id 'com.google.firebase.appdistribution'\r\n    id 'com.google.firebase.crashlytics'\r\n\r\n}\r\next {\r\n    crashlyticsEnabled = true\r\n}\r\n\r\nandroid {\r\n    signingConfigs {\r\n        debug {\r\n            storeFile file((rootDir.absolutePath+'/keystore.jks'))\r\n            keyAlias 'madrasty'\r\n            storePassword 'madrasty'\r\n            keyPassword 'madrasty'\r\n        }\r\n        release {\r\n            storeFile file((rootDir.absolutePath+'/keystore.jks'))\r\n            keyAlias 'madrasty'\r\n            storePassword 'madrasty'\r\n            keyPassword 'madrasty'\r\n        }\r\n    }\r\n    compileSdkVersion 31\r\n    buildToolsVersion \"30.0.3\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.madrasty.app\"\r\n        minSdkVersion 21\r\n        targetSdkVersion 30\r\n        versionCode 56\r\n        versionName \"1.5.8\"\r\n        multiDexEnabled true\r\n        ndkVersion \"23.0.7599858\"\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n    flavorDimensions \"version\"\r\n    productFlavors {\r\n        demo {\r\n            dimension \"version\"\r\n            firebaseAppDistribution {\r\n                releaseNotes = \"Release notes for demo version\"\r\n                testers = \"demo@testers.com\"\r\n            }\r\n        }\r\n        full {\r\n            dimension \"version\"\r\n            firebaseAppDistribution {\r\n                releaseNotes = \"Release notes for full version\"\r\n                testers = \"full@testers.com\"\r\n            }\r\n        }\r\n    }\r\n    buildTypes {\r\n        release {\r\n            firebaseAppDistribution {\r\n                releaseNotesFile = \"/path/to/releasenotes.txt\"\r\n                testers = \"ali@example.com, bri@example.com, cal@example.com\"\r\n            }\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n            signingConfig signingConfigs.release\r\n        }\r\n        debug {\r\n            applicationIdSuffix \".dev\"\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = '1.8'\r\n    }\r\n\r\n    viewBinding {\r\n        enabled = true\r\n    }\r\n    splits {\r\n        abi {\r\n            enable true\r\n            reset()\r\n            include \"x86\", \"x86_64\", \"armeabi-v7a\", \"arm64-v8a\"\r\n            universalApk true\r\n        }\r\n    }\r\n}\r\nkotlin {\r\n    experimental {\r\n        coroutines \"enable\"\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation project(path: ':data')\r\n    implementation project(path: ':domain')\r\n    implementation project(path: ':commonlib')\r\n    api project(path: ':mobilertc')\r\n\r\n    implementation deps.kotlin.lib\r\n    implementation deps.kotlin.reflect\r\n\r\n    implementation deps.lifecycle.viewModel\r\n    implementation deps.lifecycle.liveData\r\n    implementation deps.lifecycle.compiler\r\n    implementation deps.lifecycle.streams\r\n    implementation deps.lifecycle.process\r\n    implementation deps.lifecycle.testing\r\n\r\n    implementation deps.dagger.dagger\r\n    implementation deps.dagger.android\r\n    implementation deps.dagger.support\r\n    implementation deps.security.securityCrypto\r\n    implementation 'com.google.firebase:firebase-config-ktx:21.0.2'\r\n\r\n\r\n    kapt deps.dagger.compiler\r\n    kapt deps.dagger.processor\r\n\r\n    implementation deps.rx.android\r\n    implementation deps.rx.kotlin\r\n    implementation deps.rx.java\r\n\r\n    implementation deps.navigation.navigationFragment\r\n    implementation deps.navigation.navigationUi\r\n\r\n    implementation deps.timber\r\n    implementation deps.toast\r\n\r\n    implementation deps.support.core_ktx\r\n    implementation deps.support.appcompat\r\n    implementation deps.support.constraint\r\n    implementation deps.support.recyclerView\r\n    implementation deps.support.materialDesign\r\n    implementation deps.support.multidex\r\n    implementation deps.support.testRules\r\n    implementation deps.support.fragment\r\n    implementation deps.support.activity\r\n    implementation deps.support.legacy\r\n\r\n    implementation deps.circleImage\r\n\r\n    implementation deps.ImageSlideshow\r\n\r\n    implementation deps.roundedImageview\r\n\r\n    implementation deps.shapeofview\r\n\r\n    implementation deps.exoplayer.exoplayer\r\n    implementation deps.exoplayer.hls\r\n    implementation deps.exoplayer.core\r\n    implementation deps.exoplayer.ui\r\n\r\n    implementation deps.progressview\r\n    implementation deps.pinview\r\n    implementation deps.ccp\r\n\r\n    implementation deps.glide.glide\r\n    implementation deps.glide.compiler\r\n    implementation deps.glide.glide_okhttp\r\n\r\n    implementation platform(deps.firebasebom)\r\n    implementation deps.firebaseanalyticsktx\r\n    implementation deps.firebaseMessaging\r\n    implementation deps.firebaseCrashlytics\r\n    implementation deps.kotlinreflect\r\n    implementation deps.ExpandableLayout\r\n    implementation deps.swiperefreshlayout\r\n    implementation deps.coroutines\r\n    implementation deps.AestheticDialogs\r\n    implementation deps.MPAndroidChart\r\n    implementation deps.circularprogressbar\r\n    implementation deps.mathjaxview\r\n    implementation deps.uploudImage\r\n    implementation deps.sentry\r\n    implementation deps.sentryTimber\r\n    implementation deps.drawerAnim\r\n    implementation deps.playServices.authApiPhone\r\n    implementation deps.playServices.auth\r\n    implementation deps.socialLogin.googleLogin\r\n    implementation deps.socialLogin.facebookLogin\r\n\r\n    implementation deps.designTools.ssp\r\n    implementation deps.designTools.sdp\r\n\r\n    implementation deps.support.shimmer\r\n    implementation deps.support.ShimmerRecyclerView\r\n\r\n\r\n    implementation deps.paymentMethod.googlePayment\r\n\r\n    implementation deps.localbroadcastmanager\r\n    implementation deps.zendeskMessaging\r\n    implementation deps.firebaseDynamicLinks\r\n    implementation deps.firebaseInappmessagingDisplay\r\n\r\n\r\n    implementation ( 'com.github.barteksc:android-pdf-viewer:2.8.2' )\r\n    implementation ( 'com.mindorks.android:prdownloader:0.6.0')\r\n    implementation group: 'com.zendesk', name: 'chat', version: '2.2.0'\r\n\r\n    implementation \"com.github.skydoves:transformationlayout:1.1.1\"\r\n\r\n    api deps.okHttp.okHttp\r\n    api deps.okHttp.logging\r\n    implementation(deps.okHttp.prettyLogger) {\r\n        exclude group: 'org.json', module: 'json'\r\n    }\r\n\r\n    implementation 'com.chaos.view:pinview:1.4.4'\r\n    // Recommended\r\n    implementation(deps.support.bottomsheetpickers) {\r\n        exclude group: 'com.android.support', module: 'appcompat-v7'\r\n        exclude group: 'com.android.support', module: 'design'\r\n        exclude group: 'com.android.support', module: 'gridlayout-v7'\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/presentaion/build.gradle b/presentaion/build.gradle
--- a/presentaion/build.gradle	(revision 3a297f4fcb55e5c71a9c2c55bb96ddc1f0aae688)
+++ b/presentaion/build.gradle	(date 1652708785086)
@@ -197,7 +197,7 @@
     implementation deps.paymentMethod.googlePayment
 
     implementation deps.localbroadcastmanager
-    implementation deps.zendeskMessaging
+    api deps.zendeskMessaging
     implementation deps.firebaseDynamicLinks
     implementation deps.firebaseInappmessagingDisplay
 
@@ -205,7 +205,7 @@
     implementation ( 'com.github.barteksc:android-pdf-viewer:2.8.2' )
     implementation ( 'com.mindorks.android:prdownloader:0.6.0')
     implementation group: 'com.zendesk', name: 'chat', version: '2.2.0'
-
+//    api group: 'com.zendesk', name: 'support', version: '5.0.3'
     implementation "com.github.skydoves:transformationlayout:1.1.1"
 
     api deps.okHttp.okHttp
Index: presentaion/src/main/java/com/madrasty/app/player/notification/FirebaseToken.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.madrasty.app.player.notification\r\n\r\nimport com.google.android.gms.tasks.OnCompleteListener\r\nimport com.google.firebase.messaging.FirebaseMessaging\r\nimport com.madrasty.app.session.SessionManager\r\nimport com.madrasty.domain.home.models.CourseQuizResponseModel\r\nimport javax.inject.Inject\r\n\r\nclass FirebaseToken {\r\n    companion object {\r\n        var TOKEN: String = \"\"\r\n        fun refreshToken( itemChecked: (token: String) -> Unit ) {\r\n            FirebaseMessaging.getInstance().token.addOnCompleteListener(OnCompleteListener { task ->\r\n                if (!task.isSuccessful) {\r\n                    println(\"Fetching FCM registration token failed\" + task.exception)\r\n                    return@OnCompleteListener\r\n                }\r\n                // Get new FCM registration token\r\n                TOKEN = task.result.toString()\r\n                println(\"TOKEN :\" + TOKEN)\r\n                itemChecked.invoke(TOKEN)\r\n\r\n            })\r\n        }\r\n\r\n\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/presentaion/src/main/java/com/madrasty/app/player/notification/FirebaseToken.kt b/presentaion/src/main/java/com/madrasty/app/player/notification/FirebaseToken.kt
--- a/presentaion/src/main/java/com/madrasty/app/player/notification/FirebaseToken.kt	(revision 3a297f4fcb55e5c71a9c2c55bb96ddc1f0aae688)
+++ b/presentaion/src/main/java/com/madrasty/app/player/notification/FirebaseToken.kt	(date 1652776481613)
@@ -2,9 +2,8 @@
 
 import com.google.android.gms.tasks.OnCompleteListener
 import com.google.firebase.messaging.FirebaseMessaging
-import com.madrasty.app.session.SessionManager
-import com.madrasty.domain.home.models.CourseQuizResponseModel
-import javax.inject.Inject
+import com.zendesk.util.StringUtils
+import zendesk.core.Zendesk
 
 class FirebaseToken {
     companion object {
@@ -19,6 +18,10 @@
                 TOKEN = task.result.toString()
                 println("TOKEN :" + TOKEN)
                 itemChecked.invoke(TOKEN)
+                if (StringUtils.hasLength(TOKEN)) {
+                    Zendesk.INSTANCE.provider()?.pushRegistrationProvider()
+                        ?.registerWithDeviceIdentifier(TOKEN, null)
+                }
 
             })
         }
Index: presentaion/src/main/java/com/madrasty/app/home/studenthome/fragments/StudentHomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.madrasty.app.home.studenthome.fragments\r\n\r\nimport android.app.AlertDialog\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.os.CountDownTimer\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.WindowManager\r\nimport androidx.core.view.isVisible\r\nimport androidx.fragment.app.activityViewModels\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.navigation.NavOptions\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.recyclerview.widget.DefaultItemAnimator\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.PagerSnapHelper\r\nimport androidx.recyclerview.widget.SnapHelper\r\nimport androidx.viewpager2.widget.ViewPager2\r\nimport com.denzcoskun.imageslider.models.SlideModel\r\nimport com.google.android.material.tabs.TabLayoutMediator\r\nimport com.google.firebase.analytics.FirebaseAnalytics\r\nimport com.madrasty.app.BuildConfig\r\nimport com.madrasty.app.R\r\nimport com.madrasty.app.authorization.splash.viewmodels.SplashViewModel\r\nimport com.madrasty.app.base.views.BaseFragmentViewBinding\r\nimport com.madrasty.app.base.views.SnackbarMadrsty\r\nimport com.madrasty.app.databinding.FragmentSessionDetailsBinding\r\nimport com.madrasty.app.databinding.StudentHomeFragmentBinding\r\nimport com.madrasty.app.di.ViewModelFactory\r\nimport com.madrasty.app.di.modules.SessionModule\r\nimport com.madrasty.app.extensions.*\r\nimport com.madrasty.app.home.activities.HomeActivity\r\nimport com.madrasty.app.home.activities.MainHomeViewModel\r\nimport com.madrasty.app.home.music.adapter.MusicsAdapter\r\nimport com.madrasty.app.home.music.viewmodels.MusicViewModel\r\nimport com.madrasty.app.home.mylearning.adapters.CourseVideosTreeAdapter\r\nimport com.madrasty.app.home.mysession.adapter.LiveSessionAdapter\r\nimport com.madrasty.app.home.mysession.adapter.LiveSessionAdapter.ClickTypes.Join\r\nimport com.madrasty.app.home.mysession.adapter.LiveSessionAdapter.ClickTypes.OpenDetails\r\nimport com.madrasty.app.home.mysession.viewmodels.MySessionViewModel\r\nimport com.madrasty.app.home.studenthome.CirclePagerIndicatorDecoration\r\nimport com.madrasty.app.home.studenthome.adapter.InstructorAdapter\r\nimport com.madrasty.app.home.studenthome.adapter.SliderAdapter\r\nimport com.madrasty.app.session.SessionManager\r\nimport com.madrasty.app.utils.Const\r\nimport com.madrasty.app.utils.Nav\r\nimport com.madrasty.app.utils.UtilityCalender\r\nimport com.madrasty.domain.authentication.common.Resource\r\nimport com.madrasty.domain.authentication.common.ResourceType\r\nimport com.madrasty.domain.home.models.*\r\nimport org.json.JSONArray\r\nimport org.json.JSONObject\r\nimport timber.log.Timber\r\nimport us.zoom.sdk.*\r\nimport java.lang.Math.abs\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport javax.inject.Inject\r\n\r\n\r\nclass StudentHomeFragment : BaseFragmentViewBinding<StudentHomeFragmentBinding>(true) {\r\n\r\n    @Inject\r\n    lateinit var viewModelFactory: ViewModelFactory\r\n\r\n    private var counter: CountDownTimer? = null\r\n\r\n    @Inject\r\n    lateinit var sessionManager: SessionManager\r\n    var attendSessionId = 0\r\n    lateinit var selectedVideo: VideoFlatTreeResponse\r\n    lateinit var selectedJingle: JingleModel\r\n    lateinit var selectedlivesession: SessionsModel\r\n\r\n    //    private val studentHomeViewModel: StudentHomeViewModel by viewModels { viewModelFactory }\r\n    private val mySessionViewModel: MySessionViewModel by activityViewModels { viewModelFactory }\r\n    private val musicViewModel: MusicViewModel by activityViewModels { viewModelFactory }\r\n    private val mainHomeViewModel: MainHomeViewModel by viewModels { viewModelFactory }\r\n    private val splashViewModel: SplashViewModel by viewModels { viewModelFactory }\r\n\r\n\r\n    private val liveSessionAdapter: LiveSessionAdapter by lazy {\r\n        LiveSessionAdapter(\r\n            itemClicked = { selectedLiveSessionModel, type ->\r\n\r\n                selectedlivesession = selectedLiveSessionModel\r\n\r\n                when (type) {\r\n                    Join -> {\r\n                        mainHomeViewModel.callCheckPointApi(\r\n                            selectedLiveSessionModel.id.toString(),\r\n                            \"session\"\r\n                        )\r\n                    }\r\n                    LiveSessionAdapter.ClickTypes.Alarm -> {\r\n\r\n                        var event : UtilityCalender.Event? = UtilityCalender.isHasEvent(selectedLiveSessionModel.id.toString())\r\n\r\n                        if (event==null)\r\n                        {\r\n                            AlertDialog.Builder(context)\r\n                                .setMessage(\"هل تريد  تعفيل التنبيه لهذه الحصه ؟\")\r\n                                .setPositiveButton(\"نعم اريد  \") { dialog, _ ->\r\n                                    selectedLiveSessionModel.timer?.let {\r\n                                        val sessionDate: Date? = SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.US).parse(it)\r\n                                        sessionDate?.time?.let { it1 ->\r\n                                            (activity as HomeActivity).setAlarm(\r\n                                                it1,selectedLiveSessionModel.title,selectedLiveSessionModel.description,selectedLiveSessionModel.id.toString()\r\n                                            )\r\n                                            liveSessionAdapter.notifyDataSetChanged()\r\n                                        }\r\n                                    }\r\n                                    dialog.dismiss()\r\n                                }\r\n                                .setNegativeButton(\"لا اريد  \") { dialog, _ ->\r\n                                    dialog.dismiss()\r\n                                }\r\n                                .show()\r\n                        }else {\r\n//                            AlertDialog.Builder(context)\r\n//                                .setMessage(\"هل تريد الغاء تعفيل التنبيه لهذه الحصه ؟\")\r\n//                                .setPositiveButton(\"نعم اريد  \") { dialog, _ ->\r\n//                                    selectedLiveSessionModel.timer?.let {\r\n//                                        val sessionDate: Date? = SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.US).parse(it)\r\n//                                        sessionDate?.time?.let { it1 ->\r\n//                                            event.id?.let { it2 ->\r\n//                                                UtilityCalender.deleteEvent(requireContext(),\r\n//                                                    it2\r\n//                                                )\r\n//                                            }\r\n//                                        }\r\n//                                    }\r\n//                                    liveSessionAdapter.submitList(liveSessionAdapter.currentList)\r\n//                                    dialog.dismiss()\r\n//                                }\r\n//                                .setNegativeButton(\"لا اريد  \") { dialog, _ ->\r\n//                                    dialog.dismiss()\r\n//                                }\r\n//                                .show()\r\n                        }\r\n\r\n\r\n                    }\r\n                    OpenDetails -> {\r\n                        val bundle = Bundle().apply {\r\n                            putString(\r\n                                Nav.MySession.SESSION_ID,\r\n                                selectedlivesession.id.toString()\r\n                            )\r\n                        }\r\n                        val navBuilder = NavOptions.Builder()\r\n                        navBuilder.setLaunchSingleTop(true)\r\n                        findNavController().navigate(\r\n                            R.id.sessionDetailsFragment,\r\n                            bundle,\r\n                            navBuilder.build()\r\n                        )\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n        )\r\n    }\r\n    private val videosTreeAdapter: CourseVideosTreeAdapter? by lazy {\r\n        CourseVideosTreeAdapter(itemSelected = { it ->\r\n\r\n            selectedVideo = it\r\n            mainHomeViewModel.callCheckPointApi(it.id, \"video\")\r\n        })\r\n    }\r\n    private val sliderAdapter: SliderAdapter by lazy {\r\n        SliderAdapter(itemChecked = { it ->\r\n            val intent = Intent()\r\n            intent.putExtra(\"type\", \"url\")\r\n            intent.putExtra(\"url\", it.link)\r\n            (requireActivity() as HomeActivity).checkNotification(intent)\r\n\r\n        })\r\n    }\r\n    private val newMusicAdapter: MusicsAdapter by lazy {\r\n        MusicsAdapter(itemChecked = { selectedNewMusicModel ->\r\n            selectedJingle = selectedNewMusicModel\r\n            mainHomeViewModel.callCheckPointApi(selectedNewMusicModel.id.toString(), \"jingle\")\r\n        }, 2)\r\n    }\r\n    private val instructorAdapter: InstructorAdapter by lazy {\r\n        InstructorAdapter(itemChecked = { selectedNewMusicModel ->\r\n            val data = Bundle()\r\n            data.apply {\r\n                putInt(\"id\", selectedNewMusicModel.instructorId)\r\n            }\r\n            findNavController().navigate(R.id.instructorDetailsFragment, data)\r\n        },sessionManager)\r\n    }\r\n\r\n\r\n    private fun handleSelectionliveSession() {\r\n        mySessionViewModel.callGetLiveSessionsApi(0)\r\n        if (selectedlivesession.isPaid) {\r\n            val sessionDate: Date? =\r\n                SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.US).parse(\r\n                    selectedlivesession.timer!!\r\n                )\r\n            val dateNow = Date().addMinutes(15)\r\n            if (sessionDate?.before(dateNow) == true) {\r\n                val name = if (sessionManager.getSavedCurrentUser()?.firstName == null) {\r\n                    sessionManager.getSavedCurrentUser()?.userName\r\n                } else {\r\n                    sessionManager.getSavedCurrentUser()?.firstName.plus(\" \").plus(\r\n                        sessionManager.getSavedCurrentUser()?.lastName\r\n                    )\r\n                }\r\n                selectedlivesession.channel?.let {\r\n                    requireContext().joinMeeting(\r\n                        it,\r\n                        selectedlivesession.password,\r\n                        name ?: \"\",\r\n                        selectedlivesession.title.toString()\r\n                    )\r\n                    if (!BuildConfig.DEBUG){\r\n                        requireActivity().window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)\r\n                        requireActivity().window.addFlags(WindowManager.LayoutParams.FLAG_SECURE)\r\n                    }\r\n                    mySessionViewModel.logZoomAttendance(selectedlivesession)\r\n                }\r\n\r\n            } else {\r\n                activity?.let {\r\n                    SnackbarMadrsty.Warning(context = requireContext())\r\n                        .setMessage(getString(R.string.join_error))\r\n                        .show()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun handleSelectionNewMusic(selectedNewMusicModel: JingleModel) {\r\n        val bundle = Bundle().apply {\r\n            putParcelable(\"SONG_KEY\", selectedNewMusicModel)\r\n            putBoolean(\"NETWORK_LOAD\", false)\r\n            putParcelableArray(\"SONG_LIST_KEY\", musicViewModel.songs.toTypedArray())\r\n            putBoolean(\"IS_SHUFFLE_ORDER\", false)\r\n        }\r\n        findNavController().navigate(R.id.songPlayerFragment, bundle)\r\n    }\r\n\r\n    override fun onBind(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?\r\n    ): StudentHomeFragmentBinding {\r\n        homeActivityComponent.inject(this@StudentHomeFragment)\r\n        return StudentHomeFragmentBinding.inflate(inflater, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(\r\n        view: View,\r\n        savedInstanceState: Bundle?\r\n    ) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        splashViewModel.callUpdateTokenApi(\r\n            sessionManager.getREFRESH_TOKEN_KEY()\r\n        )\r\n        with(mySessionViewModel)\r\n        {\r\n            initializeSdk()\r\n            isScreenLoaded = true\r\n        }\r\n        mySessionViewModel.callGetLiveSessionsApi(0)\r\n        mySessionViewModel.callGetInstructorsApi()\r\n        mySessionViewModel.callGetBannersApi()\r\n        musicViewModel.callGetJingles()\r\n        mainHomeViewModel.getLastWatchedVideo()\r\n\r\n        setupRecyclerView()\r\n        setOnClickListener()\r\n        observeOnLiveData()\r\n        adjustViewPager()\r\n\r\n        setHomeFlags ()\r\n\r\n        val parameters = Bundle()\r\n        parameters.putString(\"app_version\", sessionManager.getAppVersion())\r\n        parameters.putString(\"LoginGrade\", sessionManager.getSavedCurrentUser()?.grade?.title)\r\n        parameters.putString(\"UserEmail\", sessionManager.getSavedCurrentUser()?.email)\r\n        parameters.putString(\"UserPhone\", sessionManager.getSavedCurrentUser()?.phone)\r\n        parameters.putString(\"CurricuId\", sessionManager.getSavedCurrentUser()?.curriculumId)\r\n        Const.Events.mFirebaseAnalytics.setDefaultEventParameters(parameters)\r\n    }\r\n\r\n    private fun setHomeFlags() {\r\n\r\n        var  appSetting = sessionManager.getSavedAppSetting()\r\n        if (appSetting != null) {\r\n            binding.containerUserWallet.isVisible = appSetting.homeContainerUserWallet\r\n            binding.mySessionTitle.isVisible = appSetting.homeMySessionTitle\r\n            binding.btnMoreSessions.isVisible = appSetting.homeBtnMoreSessions\r\n            binding.liveSessions.isVisible = appSetting.homeLiveSessions\r\n            binding.tabLayoutIndicator.isVisible = appSetting.homeTabLayoutIndicator //sessions\r\n            binding.instractorSliderList.isVisible = appSetting.homeInstractorSliderList\r\n            binding.bannerSlider.isVisible = appSetting.homeBannerSlider\r\n            binding.sliderDots.isVisible = appSetting.homeSliderDots\r\n            binding.tvContinueWatchingListTitle.isVisible = appSetting.homeTvContinueWatchingListTitle\r\n            binding.continueWatchingList.isVisible = appSetting.homeContinueWatchingList\r\n            binding.tvContinueWatchingVideoListTitle.isVisible = appSetting.homeTvContinueWatchingVideoListTitle\r\n            binding.continueWatchingVideoList.isVisible = appSetting.homeContinueWatchingVideoList\r\n        }\r\n\r\n    }\r\n\r\n    fun adjustViewPager() {\r\n\r\n        val nextItemVisiblePx =\r\n            requireActivity().resources.getDimension(R.dimen.viewpager_next_item_visible)\r\n        val currentItemHorizontalMarginPx =\r\n            requireActivity().resources.getDimension(R.dimen.viewpager_current_item_horizontal_margin)\r\n        val pageTranslationX = nextItemVisiblePx + currentItemHorizontalMarginPx\r\n        val pageTransformer = ViewPager2.PageTransformer { page: View, position: Float ->\r\n            page.translationX = -pageTranslationX * position\r\n            page.scaleY = 1 - (0.05f * abs(position))\r\n        }\r\n        binding.bannerSlider.setPageTransformer(pageTransformer)\r\n        TabLayoutMediator(binding.sliderDots, binding.bannerSlider) { tab, position ->\r\n\r\n        }.attach()\r\n\r\n    }\r\n\r\n    private fun initializeSdk() {\r\n        val sdk = ZoomSDK.getInstance()\r\n        val params = ZoomSDKInitParams().apply {\r\n            appKey = Const.Zoom.ZOOM_APP_KEY\r\n            appSecret = Const.Zoom.ZOOM_APP_SECRET\r\n            domain = Const.Zoom.ZOOM_DOMAIN\r\n            enableLog = true\r\n        }\r\n        params.appLocal = ZoomAppLocal.ZoomLocale_Def\r\n\r\n        val listener = object : ZoomSDKInitializeListener {\r\n            override fun onZoomSDKInitializeResult(errorCode: Int, internalErrorCode: Int) = Unit\r\n            override fun onZoomAuthIdentityExpired() = Unit\r\n        }\r\n\r\n        sdk.initialize(context, listener, params)\r\n\r\n    }\r\n\r\n    private fun setupRecyclerView() {\r\n        binding.liveSessions.recycledViewPool.setMaxRecycledViews(0, 0)\r\n        binding.liveSessions.adapter = liveSessionAdapter\r\n\r\n\r\n        val liveSessionsLayoutManager = LinearLayoutManager(requireContext())\r\n        liveSessionsLayoutManager.orientation = LinearLayoutManager.HORIZONTAL\r\n        binding.liveSessions.layoutManager = liveSessionsLayoutManager\r\n        binding.liveSessions.itemAnimator = DefaultItemAnimator()\r\n\r\n        val newMusicLayoutManager = LinearLayoutManager(requireContext())\r\n        newMusicLayoutManager.orientation = LinearLayoutManager.HORIZONTAL\r\n        binding.continueWatchingList.adapter = newMusicAdapter\r\n        binding.continueWatchingList.layoutManager = newMusicLayoutManager\r\n        binding.continueWatchingList.itemAnimator = DefaultItemAnimator()\r\n        binding.instractorSliderList.adapter = instructorAdapter\r\n\r\n        binding.instractorSliderList.layoutManager = LinearLayoutManager(requireContext()).also {\r\n            it.orientation = LinearLayoutManager.HORIZONTAL\r\n            it.isSmoothScrollbarEnabled = true\r\n        }\r\n\r\n        binding.instractorSliderList.itemAnimator = DefaultItemAnimator()\r\n\r\n\r\n        val horizontalLayoutManager = LinearLayoutManager(\r\n            requireContext(),\r\n            LinearLayoutManager.HORIZONTAL, false\r\n        )\r\n        val snapHelper: SnapHelper = PagerSnapHelper()\r\n        snapHelper.attachToRecyclerView(binding.continueWatchingVideoList)\r\n        binding.continueWatchingVideoList.adapter = videosTreeAdapter\r\n        binding.continueWatchingVideoList.layoutManager = horizontalLayoutManager\r\n//        binding.continueWatchingVideoList.showShimmerAdapter()\r\n\r\n\r\n        binding.bannerSlider.adapter = sliderAdapter\r\n    }\r\n\r\n\r\n    private fun setOnClickListener() {\r\n        swipeRefreshAction = {\r\n            with(mySessionViewModel)\r\n            {\r\n                callGetLiveSessionsApi(0)\r\n                callGetInstructorsApi()\r\n                mySessionViewModel.callGetBannersApi()\r\n                mainHomeViewModel.getNotificationCount()\r\n                musicViewModel.callGetJingles()\r\n                mainHomeViewModel.getLastWatchedVideo()\r\n            }\r\n        }\r\n//        binding.containerUserWallet.setOnClickListener {\r\n//            findNavController().navigate(R.id.subscriptionFragment)\r\n//        }\r\n        binding.btnMoreSessions.setOnClickListener {\r\n            findNavController().navigate(R.id.mySessionFragment)\r\n        }\r\n    }\r\n\r\n\r\n    private fun observeOnLiveData() {\r\n        mySessionViewModel.liveSessionResult.observe(viewLifecycleOwner) { result ->\r\n            getSessionsList(result)\r\n        }\r\n        musicViewModel.jinglesListResult.observe(viewLifecycleOwner) {\r\n            jingleListResult(it)\r\n        }\r\n        mySessionViewModel.instructorsResult.observe(viewLifecycleOwner) {\r\n            instructorsResult(it)\r\n        }\r\n        mySessionViewModel.bannersResult.observe(viewLifecycleOwner) {\r\n            initBanners(it)\r\n        }\r\n        mainHomeViewModel.getLastWatchedVideos.observe(viewLifecycleOwner) {\r\n            videoListResult(it)\r\n        }\r\n        mySessionViewModel.zoomAttendance.observe(viewLifecycleOwner) { result ->\r\n            zoomAttendanceResult(result)\r\n        }\r\n        mainHomeViewModel.checkPoints.observe(\r\n            viewLifecycleOwner\r\n        ) {\r\n            it.data?.second?.let { type ->\r\n                when (type) {\r\n                    \"jingle\" -> selectedJingle.id\r\n                    \"session\" -> selectedlivesession.id\r\n                    \"video\" -> selectedVideo.id.toInt()\r\n                    else -> -1\r\n                }?.let { itemId ->\r\n                    (requireActivity() as HomeActivity).checkPoints(\r\n                        it,\r\n                        itemId,\r\n                        type,\r\n                        handleAtion = { type ->\r\n                            mainClickhandler(type)\r\n                        })\r\n                }\r\n            }\r\n        }\r\n        mainHomeViewModel.notificationCountResult.observe(viewLifecycleOwner) {\r\n            notificationResponse(it)\r\n        }\r\n        mainHomeViewModel.useMyPoints.observe(\r\n            viewLifecycleOwner\r\n        ) {\r\n            (requireActivity() as HomeActivity).useMyPoints(it, handleAtion = { type ->\r\n                mainClickhandler(type)\r\n            })\r\n        }\r\n    }\r\n\r\n    private fun mainClickhandler(type: String) {\r\n        when (type) {\r\n            \"jingle\" -> {\r\n                handleSelectionNewMusic(selectedJingle)\r\n            }\r\n            \"session\" -> {\r\n                handleSelectionliveSession()\r\n            }\r\n            \"recording\" -> {\r\n\r\n\r\n            }\r\n            \"video\" -> {\r\n                val bundle = Bundle().apply {\r\n                    putInt(\r\n                        Nav.MyLearning.VIDEO_ID,\r\n                        selectedVideo.videoId.toInt()\r\n                    )\r\n                }\r\n                findNavController().navigate(\r\n                    R.id.lecturesFragment,\r\n                    bundle\r\n                )\r\n            }\r\n            \"quiz\" -> {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun zoomAttendanceResult(result: Resource<Pair<SessionsModel, Boolean>>) {\r\n        if (result.resourceType == ResourceType.SUCCESS) {\r\n\r\n            if (result.data?.second == true) {\r\n                val mFirebaseAnalytics = FirebaseAnalytics.getInstance(requireContext())\r\n                val bundle = Bundle()\r\n                bundle.putString(FirebaseAnalytics.Param.ITEM_ID, Const.Home.Action)\r\n                bundle.putString(Const.Events.AttendSession, Const.Events.AttendSession)\r\n                if (!sessionManager.getSavedCurrentUser()?.grade?.title.isNullOrBlank())\r\n                    bundle.putString(\r\n                        \"student_grade\",\r\n                        sessionManager.getSavedCurrentUser()?.grade?.title\r\n                    )\r\n                else {\r\n                    bundle.putString(\r\n                        \"student_grade\",\r\n                        \"cant get grade user id is \".plus(sessionManager.getSavedCurrentUser()?.grade?.title)\r\n                    )\r\n                }\r\n                bundle.putString(\"subject\", result.data!!.first.subject)\r\n                bundle.putString(\"instructorName\", result.data!!.first.instructorName)\r\n                bundle.putString(\"title\", result.data!!.first.title)\r\n                bundle.putString(\"date\", result.data!!.first.date)\r\n                bundle.putString(\"curriculum\", result.data!!.first.curriculum)\r\n                mFirebaseAnalytics.logEvent(FirebaseAnalytics.Event.SCREEN_VIEW, bundle)\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n    private fun notificationResponse(result: Resource<NotificationCountIResponse>?) {\r\n        when (result?.resourceType) {\r\n            ResourceType.LOADING -> {\r\n                activity?.showProgressWheel(true)\r\n            }\r\n            ResourceType.SUCCESS -> {\r\n                activity?.showProgressWheel(false)\r\n                sessionManager.saveUserStatus(result.data?.userStatus ?: \"subscription\")\r\n                if (result.data?.userStatus == \"subscription\") {\r\n                    binding.apply {\r\n                        txtUserWallet.isVisible = false\r\n                        containerPoints.isVisible = false\r\n                        mainHomeViewModel.showPoints = false\r\n\r\n                    }\r\n                    (requireActivity() as HomeActivity).binding.apply {\r\n                        txtPoints.isVisible = false\r\n                        btnAddPoints.isVisible = false\r\n                    }\r\n                } else {\r\n                    binding.apply {\r\n                        txtUserWallet.isVisible = true\r\n                        containerPoints.isVisible = true\r\n                        mainHomeViewModel.showPoints = true\r\n\r\n                    }\r\n                    (requireActivity() as HomeActivity).binding.apply {\r\n                        txtPoints.isVisible = true\r\n                        btnAddPoints.isVisible = true\r\n                    }\r\n                    binding.txtUserWallet.text = \"x \".plus(result.data?.freePoints)\r\n                }\r\n                if (result.data?.freePointsTime.isNullOrEmpty())\r\n                    binding.txtTimePoints.text = result.data?.message\r\n                else {\r\n                    counter?.cancel()\r\n                    try {\r\n                        addTimerForUserPoints(\r\n                            getDiffTime(result.data?.freePointsTime!!).time,\r\n                            result.data?.message ?: \"\"\r\n                        )\r\n                    } catch (e: Exception) {\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n            ResourceType.LOGIN_ERRORS -> {\r\n                activity?.showProgressWheel(false)\r\n                sessionManager.logout()\r\n                findNavController().popBackStack(\r\n                    R.id.splashFragment,\r\n                    false\r\n                )\r\n            }\r\n            else -> {\r\n                activity?.showProgressWheel(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getDiffTime(date: String): Date {\r\n        try {\r\n            val sessionDate: Date? = SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.US).parse(date)\r\n            val today = Date()\r\n            if (today.time > sessionDate?.time!!)\r\n                return Date(today.time - today.time)\r\n            return Date(sessionDate.time - today.time)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            return Date()\r\n        }\r\n    }\r\n\r\n    private fun addTimerForUserPoints(\r\n        time: Long,\r\n        message: String\r\n    ) {\r\n        if (time.toInt() == 0) {\r\n            return\r\n        }\r\n        counter = object : CountDownTimer(time, 1000) {\r\n            override fun onTick(millisUntilFinished: Long) {\r\n                binding.txtTimePoints.text =\r\n                    message\r\n                        .plus(\"\\n\")\r\n                        .plus((millisUntilFinished / 1000) % 60)\r\n                        .plus(\" : \")\r\n                        .plus((millisUntilFinished / (1000 * 60)) % 60)\r\n                        .plus(\" : \")\r\n                        .plus((millisUntilFinished / (1000 * 60 * 60)) % 24)\r\n                        .plus(\" : \")\r\n                        .plus((millisUntilFinished / (1000 * 60 * 60 * 24)) % 360)\r\n\r\n\r\n            }\r\n\r\n            override fun onFinish() {\r\n\r\n                binding.txtTimePoints.text = message.plus(\" 00:00:00:00\")\r\n            }\r\n        }\r\n\r\n        counter?.start()\r\n\r\n    }\r\n\r\n\r\n    private fun videoListResult(result: Resource<List<VideoFlatTreeResponse>>?) {\r\n//        videosTreeAdapter?.submitList(null)\r\n        when (result?.resourceType) {\r\n            ResourceType.LOADING -> {\r\n//                binding.continueWatchingVideoList.showShimmerAdapter()\r\n            }\r\n            ResourceType.SUCCESS -> {\r\n                binding.continueWatchingVideoList.hideShimmerAdapter()\r\n                if (result.data?.isNullOrEmpty()!!) {\r\n                    binding.tvContinueWatchingVideoListTitle.visibility = View.GONE\r\n                    binding.continueWatchingVideoList.visibility = View.GONE\r\n                } else {\r\n                    binding.tvContinueWatchingVideoListTitle.visibility = View.VISIBLE\r\n                    binding.continueWatchingVideoList.visibility = View.VISIBLE\r\n                    Timber.d(result.data.toString())\r\n                    videosTreeAdapter?.submitList(result.data)\r\n                }\r\n            }\r\n            ResourceType.LOGIN_ERRORS -> {\r\n                binding.continueWatchingVideoList.hideShimmerAdapter()\r\n                sessionManager.logout()\r\n                findNavController().popBackStack(\r\n                    R.id.splashFragment,\r\n                    false\r\n                )\r\n            }\r\n            else -> {\r\n                binding.continueWatchingVideoList.hideShimmerAdapter()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun initBanners(result: Resource<List<BannerModel>>?) {\r\n        when (result?.resourceType) {\r\n            ResourceType.LOADING -> {\r\n//                activity?.showProgressWheel(true)\r\n            }\r\n            ResourceType.SUCCESS -> {\r\n                activity?.showProgressWheel(false)\r\n\r\n                if (result.data?.isNullOrEmpty()!!) {\r\n                    binding.bannerSlider.visibility = View.GONE\r\n                } else {\r\n                    sliderAdapter.submitList(result.data)\r\n                    Timber.d(result.data.toString())\r\n                }\r\n            }\r\n            ResourceType.LOGIN_ERRORS -> {\r\n                activity?.showProgressWheel(false)\r\n                sessionManager.logout()\r\n                findNavController().popBackStack(\r\n                    R.id.splashFragment,\r\n                    false\r\n                )\r\n            }\r\n            else -> {\r\n                activity?.showProgressWheel(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun instructorsResult(result: Resource<List<InstructorModel>>) {\r\n        when (result.resourceType) {\r\n            ResourceType.LOADING -> {\r\n                binding.instractorSliderList.showShimmerAdapter()\r\n            }\r\n            ResourceType.SUCCESS -> {\r\n                instructorAdapter.submitList(result.data)\r\n                binding.instractorSliderList.hideShimmerAdapter()\r\n            }\r\n\r\n            ResourceType.LOGIN_ERRORS -> {\r\n                binding.instractorSliderList.hideShimmerAdapter()\r\n                sessionManager.logout()\r\n                findNavController().popBackStack(\r\n                    R.id.splashFragment,\r\n                    false\r\n                )\r\n            }\r\n            else -> {\r\n                binding.instractorSliderList.hideShimmerAdapter()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun jingleListResult(result: Resource<List<JingleModel>>) {\r\n        when (result.resourceType) {\r\n            ResourceType.LOADING -> {\r\n                binding.continueWatchingList.showShimmerAdapter()\r\n            }\r\n            ResourceType.SUCCESS -> {\r\n                binding.continueWatchingList.hideShimmerAdapter()\r\n                musicViewModel.songs = result.data as ArrayList<JingleModel>\r\n                if (musicViewModel.songs.isNotEmpty().also {\r\n                        binding.tvContinueWatchingListTitle.isVisible = it\r\n                    })\r\n                    newMusicAdapter.submitList(musicViewModel.songs)\r\n\r\n            }\r\n\r\n            ResourceType.LOGIN_ERRORS -> {\r\n                binding.continueWatchingList.hideShimmerAdapter()\r\n                sessionManager.logout()\r\n                findNavController().popBackStack(\r\n                    R.id.splashFragment,\r\n                    false\r\n                )\r\n            }\r\n            else -> {\r\n                binding.continueWatchingList.hideShimmerAdapter()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getSessionsList(result: Resource<List<SessionsModel>>) {\r\n        when (result.resourceType) {\r\n            ResourceType.LOADING -> {\r\n                binding.liveSessions.showShimmerAdapter()\r\n            }\r\n            ResourceType.SUCCESS -> {\r\n                binding.liveSessions.hideShimmerAdapter()\r\n                binding.liveSessions.adapter = null\r\n                liveSessionAdapter.apply {\r\n                    submitList(null)\r\n                }\r\n                mySessionViewModel.sessionsList = result.data!!\r\n\r\n                if (result.data!!.size > 4)\r\n                    liveSessionAdapter.submitList(result.data!!.subList(0, 5))\r\n                else\r\n                    liveSessionAdapter.submitList(result.data!!)\r\n\r\n                binding.liveSessions.adapter = liveSessionAdapter\r\n                binding.liveSessions.addItemDecoration(CirclePagerIndicatorDecoration())\r\n\r\n                if (result.data!!.isEmpty()) {\r\n                    binding.liveSessions.isVisible = false\r\n                    binding.mySessionTitle.isVisible = false\r\n                } else {\r\n                    binding.liveSessions.isVisible = true\r\n                    binding.mySessionTitle.isVisible = true\r\n                }\r\n\r\n            }\r\n\r\n            ResourceType.LOGIN_ERRORS -> {\r\n                binding.liveSessions.hideShimmerAdapter()\r\n                sessionManager.logout()\r\n                findNavController().popBackStack(\r\n                    R.id.splashFragment,\r\n                    false\r\n                )\r\n            }\r\n            else -> {\r\n                binding.liveSessions.hideShimmerAdapter()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun handleServerError(errorsArray: JSONArray) {\r\n        for (i in 0 until errorsArray.length()) {\r\n            val jsonObject: JSONObject = errorsArray.getJSONObject(i)\r\n\r\n            SnackbarMadrsty.Error(context = requireContext())\r\n                .setMessage(jsonObject.getString(\"message\"))\r\n                .show()\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        mainHomeViewModel.getCartCount()\r\n        mainHomeViewModel.getNotificationCount()\r\n        val name = if (sessionManager.getSavedCurrentUser()?.firstName == null) {\r\n            sessionManager.getSavedCurrentUser()?.userName\r\n        } else {\r\n            sessionManager.getSavedCurrentUser()?.firstName.plus(\" \").plus(\r\n                sessionManager.getSavedCurrentUser()?.lastName\r\n            )\r\n        }\r\n        binding.txtUserName.text =\r\n            name ?: \"\"\r\n        val wallet = if (sessionManager.getSavedCurrentUser()?.wallet?.isEmpty() == true) {\r\n            \"0.00\"\r\n        } else {\r\n            sessionManager.getSavedCurrentUser()?.wallet\r\n        }\r\n//        binding.txtUserWallet.text = wallet\r\n        binding.txtStudentCode.text = getText(R.string.code).toString().plus(\" : \")\r\n            .plus(sessionManager.getSavedCurrentUser()?.billingAcct.toString())\r\n        binding.txtStudentCode.setOnClickListener {\r\n            (requireActivity() as HomeActivity).copyFromTextView(sessionManager.getSavedCurrentUser()?.billingAcct.toString())\r\n        }\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        counter?.cancel()\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        counter?.cancel()\r\n    }\r\n\r\n    fun InstructorModel.mapToSlideModel(): SlideModel =\r\n        SlideModel(imageUrl = instructorImage, title = instructorName)\r\n\r\n    fun BannerModel.mapToSlideBannerModel(): SlideModel =\r\n        SlideModel(imageUrl = image)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/presentaion/src/main/java/com/madrasty/app/home/studenthome/fragments/StudentHomeFragment.kt b/presentaion/src/main/java/com/madrasty/app/home/studenthome/fragments/StudentHomeFragment.kt
--- a/presentaion/src/main/java/com/madrasty/app/home/studenthome/fragments/StudentHomeFragment.kt	(revision 3a297f4fcb55e5c71a9c2c55bb96ddc1f0aae688)
+++ b/presentaion/src/main/java/com/madrasty/app/home/studenthome/fragments/StudentHomeFragment.kt	(date 1652707997798)
@@ -12,7 +12,6 @@
 import androidx.fragment.app.activityViewModels
 import androidx.fragment.app.viewModels
 import androidx.navigation.NavOptions
-import androidx.navigation.findNavController
 import androidx.navigation.fragment.findNavController
 import androidx.recyclerview.widget.DefaultItemAnimator
 import androidx.recyclerview.widget.LinearLayoutManager
@@ -27,10 +26,8 @@
 import com.madrasty.app.authorization.splash.viewmodels.SplashViewModel
 import com.madrasty.app.base.views.BaseFragmentViewBinding
 import com.madrasty.app.base.views.SnackbarMadrsty
-import com.madrasty.app.databinding.FragmentSessionDetailsBinding
 import com.madrasty.app.databinding.StudentHomeFragmentBinding
 import com.madrasty.app.di.ViewModelFactory
-import com.madrasty.app.di.modules.SessionModule
 import com.madrasty.app.extensions.*
 import com.madrasty.app.home.activities.HomeActivity
 import com.madrasty.app.home.activities.MainHomeViewModel
@@ -55,6 +52,7 @@
 import org.json.JSONObject
 import timber.log.Timber
 import us.zoom.sdk.*
+import zendesk.support.requestlist.RequestListActivity
 import java.lang.Math.abs
 import java.text.SimpleDateFormat
 import java.util.*
@@ -289,6 +287,13 @@
         parameters.putString("UserPhone", sessionManager.getSavedCurrentUser()?.phone)
         parameters.putString("CurricuId", sessionManager.getSavedCurrentUser()?.curriculumId)
         Const.Events.mFirebaseAnalytics.setDefaultEventParameters(parameters)
+
+
+        binding.txtUserName.setOnClickListener {
+            RequestListActivity.builder()
+                .show(requireActivity())
+        }
+
     }
 
     private fun setHomeFlags() {
Index: dependencies-all.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>ext.deps = [\r\n\r\n        //region BUILD\r\n\r\n\r\n        'build'               : [\r\n                'gradle'        : \"com.android.tools.build:gradle:4.2.0\",\r\n                'kotlin'        : \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.30-RC\",\r\n                'googleServices': \"com.google.gms:google-services:4.3.10\",\r\n                'navSafeArgs'   : \"androidx.navigation:navigation-safe-args-gradle-plugin:2.3.0\",\r\n        ],\r\n        // endregion\r\n\r\n        //region MAIN\r\n\r\n        'kotlin'              : [\r\n                'lib'    : \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.4.30-RC\",\r\n                'reflect': \"org.jetbrains.kotlin:kotlin-reflect:1.4.30-RC\"\r\n        ],\r\n        'support'             : [\r\n                'core_ktx'      : \"androidx.core:core-ktx:1.3.1\",\r\n                'appcompat'     : \"androidx.appcompat:appcompat:1.1.0\",\r\n                'constraint'    : \"androidx.constraintlayout:constraintlayout:2.0.0-beta8\",\r\n                'recyclerView'  : \"androidx.recyclerview:recyclerview:1.1.0\",\r\n                'materialDesign': \"com.google.android.material:material:1.6.0-alpha01\",\r\n                'multidex'      : \"androidx.multidex:multidex:2.0.1\",\r\n                'testRules'     : \"androidx.test:rules:1.1.0\",\r\n                'fragment'      : \"androidx.fragment:fragment-ktx:1.3.0-alpha04\",\r\n                'activity'      : \"androidx.activity:activity:1.2.0-alpha04\",\r\n                'legacy'        : \"androidx.legacy:legacy-support-v4:1.0.0\",\r\n                'shimmer'       : \"com.facebook.shimmer:shimmer:0.5.0\",\r\n                'ShimmerRecyclerView'       : \"com.github.sharish:ShimmerRecyclerView:v1.3\",\r\n                'gridlayout'       : \"com.android.support:gridlayout-v7:28.0.0\",\r\n                'bottomsheetpickers'       : \"com.philliphsu:bottomsheetpickers:2.4.1\",\r\n        ],\r\n        'socialLogin'         : [\r\n                'googleLogin'  : \"com.google.android.gms:play-services-auth:20.0.0\",\r\n                'facebookLogin': 'com.facebook.android:facebook-android-sdk:13.0.0'\r\n        ],\r\n        'chatSupport'         : [\r\n                'zendeskChat'     : \"group: 'com.zendesk', name: 'chat', version: '3.3.2'\",\r\n                'zendeskmessaging': \"group: 'com.zendesk', name: 'messaging', version: '5.2.2'\"\r\n        ],\r\n        'navigation'          : [\r\n                'navigationFragment': \"androidx.navigation:navigation-fragment-ktx:2.3.5\",\r\n                'navigationUi'      : \"androidx.navigation:navigation-ui-ktx:2.3.5\",\r\n                'testing'           : \"androidx.navigation:navigation-testing:1.5.10\",\r\n        ],\r\n        'playServices'        : [\r\n                'playCore'    : \"com.google.android.play:core:1.7.3\",\r\n                'location'    : \"com.google.android.gms:play-services-location:17.0.0\",\r\n                'maps'        : \"com.google.android.gms:play-services-maps:17.0.0\",\r\n                'auth'        : \"com.google.android.gms:play-services-auth:19.2.0\",\r\n                'authApiPhone': \"com.google.android.gms:play-services-auth-api-phone:17.5.1\",\r\n                'iap'         : \"com.android.billingclient:billing-ktx:3.0.0\"\r\n        ],\r\n        'dagger'              : [\r\n                'dagger'   : \"com.google.dagger:dagger:2.31.2\",\r\n                'compiler' : \"com.google.dagger:dagger-compiler:2.31.2\",\r\n                'android'  : \"com.google.dagger:dagger-android:2.31.2\",\r\n                'processor': \"com.google.dagger:dagger-android-processor:2.31.2\",\r\n                'support'  : \"com.google.dagger:dagger-android-support:2.31.2\",\r\n        ],\r\n        'retrofit'            : [\r\n                'retrofit': \"com.squareup.retrofit2:retrofit:2.9.0\",\r\n                'adapters': \"com.squareup.retrofit2:adapter-rxjava2:2.9.0\",\r\n                'gson'    : \"com.squareup.retrofit2:converter-gson:2.9.0\",\r\n        ],\r\n        'okHttp'              : [\r\n                'okHttp'       : \"com.squareup.okhttp3:okhttp:4.9.0\",\r\n                'logging'      : \"com.squareup.okhttp3:logging-interceptor:4.9.0\",\r\n                'mockwebserver': \"com.squareup.okhttp3:mockwebserver:4.9.0\",\r\n                'prettyLogger' : \"com.github.ihsanbal:LoggingInterceptor:3.1.0\",\r\n        ],\r\n        'rxNetwork'           : \"com.github.pwittchen:reactivenetwork-rx2:3.0.6\",\r\n        'codec'               : \"commons-codec:commons-codec:1.8\",\r\n        'rx'                  : [\r\n                'android': \"io.reactivex.rxjava2:rxandroid:2.0.2\",\r\n                'kotlin' : \"io.reactivex.rxjava2:rxkotlin:2.2.0\",\r\n                'java'   : \"io.reactivex.rxjava2:rxjava:2.2.2\",\r\n        ],\r\n        'lifecycle'           : [\r\n                'viewModel': \"androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1\",\r\n                'liveData' : \"androidx.lifecycle:lifecycle-livedata:2.2.0\",\r\n                'compiler' : \"androidx.lifecycle:lifecycle-common-java8:2.2.0\",\r\n                'streams'  : \"androidx.lifecycle:lifecycle-reactivestreams:2.2.0\",\r\n                'process'  : \"androidx.lifecycle:lifecycle-process:2.2.0\",\r\n                'testing'  : \"androidx.arch.core:core-testing:2.1.0\",\r\n        ],\r\n        'glide'               : [\r\n                'glide'       : \"com.github.bumptech.glide:glide:4.11.0\",\r\n                'compiler'    : \"com.github.bumptech.glide:compiler:4.11.0\",\r\n                'glide_okhttp': \"com.github.bumptech.glide:okhttp3-integration:4.11.0\"\r\n        ],\r\n        'google_gson'         : \"com.google.code.gson:gson:2.8.6\",\r\n        'circleImage'         : \"de.hdodenhof:circleimageview:2.2.0\",\r\n        'roundedImageview'    : \"com.makeramen:roundedimageview:2.3.0\",\r\n        'rxbinding2'          : \"com.jakewharton.rxbinding2:rxbinding-kotlin:2.0.0\",\r\n        'discreateScrollView' : \"com.yarolegovich:discrete-scrollview:1.5.1\",\r\n        'mathjaxview'         : 'io.github.sidvenu.mathjaxview:mathjaxview:1.0.7',\r\n\r\n        'security'            : [\r\n                'securityCrypto': \"androidx.security:security-crypto:1.1.0-alpha03\",\r\n        ],\r\n\r\n        'shapeofview'         : \"io.github.florent37:shapeofview:1.4.7\",\r\n        'ImageSlideshow'      : \"com.github.denzcoskun:ImageSlideshow:0.1.0\",\r\n        'autoimageslider'      : \"com.github.smarteist:autoimageslider:1.4.0\",\r\n\r\n        'exoplayer'           : [\r\n                'exoplayer': 'com.google.android.exoplayer:exoplayer:2.14.2',\r\n                'hls'      : 'com.google.android.exoplayer:exoplayer-hls:2.14.2',\r\n                'core'     : 'com.google.android.exoplayer:exoplayer-core:2.14.2',\r\n                'ui'       : 'com.google.android.exoplayer:exoplayer-ui:2.14.2',\r\n        ],\r\n        'progressview'        : \"com.github.skydoves:progressview:1.1.1\",\r\n        'pinview'             : \"com.github.poovamraj:PinEditTextField:1.2.6\",\r\n        'ccp'                 : \"com.hbb20:ccp:2.5.1\",\r\n\r\n        'firebasebom'         : 'com.google.firebase:firebase-bom:29.1.0',\r\n        'firebaseMessaging'   : 'com.google.firebase:firebase-messaging:23.0.0',\r\n        'firebaseCrashlytics' : 'com.google.firebase:firebase-crashlytics:17.3.0',\r\n        'firebaseanalyticsktx': 'com.google.firebase:firebase-analytics-ktx:20.1.0',\r\n        'firebaseDynamicLinks'         : 'com.google.firebase:firebase-dynamic-links-ktx:21.0.1',\r\n        'firebaseInappmessagingDisplay'         : 'com.google.firebase:firebase-inappmessaging-display:20.1.2',\r\n        'firebaseConfig ' :'com.google.firebase:firebase-config-ktx:21.0.2',\r\n\r\n\r\n        'kotlinreflect'       : 'org.jetbrains.kotlin:kotlin-reflect:1.5.30',\r\n        'eventbus'            : \"org.greenrobot:eventbus:3.2.0\",\r\n        'FragmentStepper'     : 'com.github.Rygelouv:FragmentStepper:0.0.3',\r\n        'AestheticDialogs'    : 'com.github.gabriel-TheCode:AestheticDialogs:1.3.6',\r\n        'ExpandableLayout'    : 'com.github.cachapa:ExpandableLayout:2.9.2',\r\n        'swiperefreshlayout'  : 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0',\r\n        'coroutines'          : 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0',\r\n        'MPAndroidChart'      : 'com.github.PhilJay:MPAndroidChart:v3.1.0',\r\n        'circularprogressbar' : 'com.mikhaellopez:circularprogressbar:3.1.0',\r\n        'uploudImage'         : 'com.github.dhaval2404:imagepicker:2.1',\r\n\r\n        'localbroadcastmanager'         : 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0',\r\n        'zendeskMessaging'         : 'zendesk.messaging:messaging-android:2.1.0',\r\n\r\n\r\n\r\n        // endregion\r\n\r\n        ////////////////////////////////////////////////////////////////////////////////////////////\r\n        // TOOLS                                                                                  //\r\n        ////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        'rxPermissions'       : \"com.github.tbruyelle:rxpermissions:0.10.2\",\r\n\r\n        'pull_refresh'        : \"com.github.aliumujib:SwipeToRefresh:1.01\",\r\n\r\n        'sentry'              : \"io.sentry:sentry-android:5.4.0\",\r\n        'sentryTimber'        : \"io.sentry:sentry-android-timber:5.4.0\",\r\n        'drawerAnim'          : \"com.github.mindinventory:minavdrawer:1.2.2\",\r\n\r\n        'designTools'         : [\r\n                'ssp': 'com.intuit.ssp:ssp-android:1.0.6',\r\n                'sdp': 'com.intuit.sdp:sdp-android:1.0.6',\r\n                'flexbox': 'com.google.android.flexbox:flexbox:3.0.0',\r\n\r\n        ],\r\n        'paymentMethod':[\r\n                'googlePayment':\"com.google.android.gms:play-services-wallet:19.1.0\"\r\n        ],\r\n\r\n        ////////////////////////////////////////////////////////////////////////////////////////////\r\n        // DEBUG                                                                                  //\r\n        ////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        'timber'              : \"com.jakewharton.timber:timber:4.7.1\",\r\n        'toast'               : \"com.github.GrenderG:Toasty:1.5.0\",\r\n\r\n        ////////////////////////////////////////////////////////////////////////////////////////////\r\n        // TESTING                                                                                //\r\n        ////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        'jUnit'               : \"junit:junit:4.12\",\r\n        'truth'               : \"com.google.truth:truth:0.40\",\r\n        'runner'              : \"androidx.test:runner:1.1.0\",\r\n        'JUnitRunner'         : \"androidx.test.runner.AndroidJUnitRunner\",\r\n        'espresso'            : [\r\n                'core'   : \"androidx.test.espresso:espresso-core:3.1.0\",\r\n                'intents': \"androidx.test.espresso:espresso-intents:3.1.0\",\r\n                'contrib': \"androidx.test.espresso:espresso-contrib:3.1.0\",\r\n        ],\r\n        'mockito'             : [\r\n                'core'   : \"org.mockito:mockito-core:2.22.0\",\r\n                'inline' : \"org.mockito:mockito-inline:2.22.0\",\r\n                'android': \"org.mockito:mockito-android:2.22.0\",\r\n                'kotlin' : \"com.nhaarman:mockito-kotlin:1.6.0\",\r\n        ],\r\n\r\n\r\n        'androidxTest'        : \"androidx.test:core:1.1.0\",\r\n        'androidxJunit'       : \"androidx.test.ext:junit:1.1.0\",\r\n        'androidxFTest'       : \"androidx.fragment:fragment-testing:fragment\",\r\n        'mockwebserver'       : \"com.squareup.okhttp3:mockwebserver:4.3.1\"\r\n\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dependencies-all.gradle b/dependencies-all.gradle
--- a/dependencies-all.gradle	(revision 3a297f4fcb55e5c71a9c2c55bb96ddc1f0aae688)
+++ b/dependencies-all.gradle	(date 1652708539185)
@@ -138,7 +138,7 @@
         'uploudImage'         : 'com.github.dhaval2404:imagepicker:2.1',
 
         'localbroadcastmanager'         : 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0',
-        'zendeskMessaging'         : 'zendesk.messaging:messaging-android:2.1.0',
+        'zendeskMessaging'         : 'zendesk.messaging:messaging-android:2.3.0',
 
 
 
