Index: presentaion/src/main/java/com/madrasty/app/player/notification/FirebaseMessagingReceiver.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.madrasty.app.player.notification\r\n\r\nimport android.app.Notification\r\nimport android.app.NotificationManager\r\nimport android.app.PendingIntent\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.os.Build\r\nimport androidx.core.app.NotificationCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.google.firebase.messaging.FirebaseMessagingService\r\nimport com.google.firebase.messaging.RemoteMessage\r\nimport com.madrasty.app.R\r\nimport com.madrasty.app.home.activities.HomeActivity\r\nimport com.madrasty.app.player.notification.MediaNotificationManager.Companion.NOTIFICATION_ID\r\nimport com.madrasty.app.utils.Const\r\nimport com.madrasty.app.utils.errorHanldling.CrashHandler\r\nimport timber.log.Timber\r\nimport zendesk.messaging.android.push.PushNotifications\r\nimport zendesk.messaging.android.push.PushNotifications.updatePushNotificationToken\r\nimport zendesk.messaging.android.push.PushResponsibility\r\nimport java.io.IOException\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\n\r\nclass FirebaseMessagingReceiver : FirebaseMessagingService() {\r\n\r\n    var mCotext: Context? = null\r\n    override fun onMessageReceived(remoteMessage: RemoteMessage) {\r\n        super.onMessageReceived(remoteMessage)\r\n\r\n        val responsibility = PushNotifications.shouldBeDisplayed(remoteMessage.data)\r\n        when (responsibility) {\r\n            PushResponsibility.MESSAGING_SHOULD_DISPLAY -> {\r\n                // This push belongs to Messaging and the SDK is able to display it to the end user\r\n                PushNotifications.displayNotification(context = this, messageData = remoteMessage.data)\r\n            }\r\n            PushResponsibility.MESSAGING_SHOULD_NOT_DISPLAY -> {\r\n                // This push belongs to Messaging but it should not be displayed to the end user\r\n            }\r\n            PushResponsibility.NOT_FROM_MESSAGING -> {\r\n                // This push does not belong to Messaging\r\n                Timber.d(\"Notificaiton Test\" + remoteMessage.data.toString())\r\n                try {\r\n                    mCotext = this\r\n\r\n                    showNotification(notificationHandler(remoteMessage))\r\n                } catch (e: Exception) {\r\n                    Timber.e(\"Handled \\n\".plus(CrashHandler().buildError(e)))\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    override fun onNewToken(newToken: String) {\r\n        updatePushNotificationToken(newToken)\r\n    }\r\n    private fun showNotification(notificationModel: NotificationModel) {\r\n        try {\r\n            val intent = notificationModel.action\r\n            intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP or Intent.FLAG_ACTIVITY_CLEAR_TOP)\r\n            val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager\r\n            val pendingIntent = PendingIntent.getActivity(\r\n                    this,\r\n                    NOTIFICATION_ID,\r\n                    intent,\r\n                    PendingIntent.FLAG_UPDATE_CURRENT\r\n            )\r\n            val notificationBuilder: NotificationCompat.Builder =\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                        NotificationCompat.Builder(\r\n                                this,\r\n                                MadrastyNotificationManager.getMainNotificationId().toString()\r\n                        )\r\n                    } else {\r\n                        NotificationCompat.Builder(this)\r\n                    }\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                notificationBuilder.color = ContextCompat.getColor(\r\n                        applicationContext,\r\n                        R.color.colorPrimaryDark\r\n                )\r\n            }\r\n\r\n            val bitmap: Bitmap? = getBitmapFromURL(notificationModel.image)\r\n            val notification =\r\n                    notificationBuilder\r\n                            .setContentTitle(notificationModel.title)\r\n                            .setContentText(notificationModel.description)\r\n                            .setAutoCancel(true)\r\n                            .setStyle(\r\n                                    NotificationCompat.BigPictureStyle()\r\n                                            .bigPicture(bitmap)\r\n                                            .setSummaryText(notificationModel.description)\r\n                            )\r\n                            .setDefaults(Notification.DEFAULT_SOUND or Notification.DEFAULT_LIGHTS)\r\n                            .setSmallIcon(R.drawable.ic_auth_logo)\r\n                            .setContentIntent(pendingIntent)\r\n                            .build()\r\n            if (notificationModel.sound!!) {\r\n                notificationManager.notify(NOTIFICATION_ID, notificationBuilder.build())\r\n            } else {\r\n                var actionIntent = Intent(\"action\")\r\n                actionIntent.putExtras(intent)\r\n                sendBroadcast(actionIntent)\r\n            }\r\n        } catch (e: java.lang.Exception) {\r\n            Timber.e(\"Handled \\n\".plus(CrashHandler().buildError(e)))\r\n        }\r\n    }\r\n\r\n    private fun notificationHandler(remoteMessage: RemoteMessage): NotificationModel {\r\n        val action =\r\n                Intent(mCotext, HomeActivity::class.java)\r\n        action.putExtra(\"title\", remoteMessage.data[\"title\"])\r\n        action.putExtra(\"body\", remoteMessage.data[\"body\"])\r\n        when (remoteMessage.data[\"type\"]) {\r\n            \"parameter\" -> {\r\n                action.putExtra(\"type\", \"parameter\")\r\n                        .putExtra(Const.NotificationKeys.ACTION_PAGE, remoteMessage.data[\"module\"])\r\n                        .putExtra(Const.NotificationKeys.ACTION_ID, remoteMessage.data[\"id\"].toString())\r\n                if (remoteMessage.data[\"course_id\"] != null)\r\n                    action.putExtra(\"course_id\", remoteMessage.data[\"course_id\"])\r\n                if (remoteMessage.data.containsKey(\"url\"))\r\n                    action.putExtra(\"url\", remoteMessage.data[\"url\"])\r\n\r\n            }\r\n        }\r\n        when (remoteMessage.data[\"key\"]) {\r\n            \"setting\" -> {\r\n                action.putExtra(\"type\", \"action\")\r\n                        .putExtra(\"action\", remoteMessage.data[\"key\"])\r\n            }\r\n            \"session\" ->{\r\n                action.putExtra(\"type\", \"action\")\r\n                    .putExtra(\"action\", remoteMessage.data[\"key\"])\r\n                    .putExtra(\"date\", remoteMessage.data[\"date\"]?.toLong())\r\n                    .putExtra(Const.NotificationKeys.ACTION_ID, remoteMessage.data[\"id\"].toString())\r\n            }\r\n        }\r\n        if (remoteMessage.data.containsKey(\"popup\")) {\r\n            action.putExtra(\"type\", \"popup\")\r\n                    .putExtra(Const.NotificationKeys.ACTION_PAGE, remoteMessage.data[\"popup\"])\r\n                    .putExtra(Const.NotificationKeys.ACTION_ID, remoteMessage.data[\"id\"].toString())\r\n                    .putExtra(\"button_title\", remoteMessage.data[\"button_title\"])\r\n            if (remoteMessage.data[\"course_id\"] != null) {\r\n                action.putExtra(\"course_id\", remoteMessage.data[\"course_id\"])\r\n            }\r\n        }\r\n        return NotificationModel(\r\n                id = remoteMessage.data[\"id\"],\r\n                title = remoteMessage.data[\"title\"],\r\n                description = remoteMessage.data[\"body\"],\r\n                image = remoteMessage.data[\"image\"],\r\n                icon = remoteMessage.data[\"icon\"],\r\n                sound = remoteMessage.data[\"sound\"].toString() == \"1\",\r\n                type = remoteMessage.data[\"type\"],\r\n                courseId = remoteMessage.data[\"course_id\"]?.toInt(),\r\n                action = action\r\n        )\r\n    }\r\n\r\n    fun getBitmapFromURL(src: String?): Bitmap? {\r\n        return try {\r\n            val url = URL(src)\r\n            val connection: HttpURLConnection = url.openConnection() as HttpURLConnection\r\n            connection.doInput = true\r\n            connection.connect()\r\n            val input: InputStream = connection.inputStream\r\n            BitmapFactory.decodeStream(input)\r\n        } catch (e: IOException) {\r\n            null\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/presentaion/src/main/java/com/madrasty/app/player/notification/FirebaseMessagingReceiver.kt b/presentaion/src/main/java/com/madrasty/app/player/notification/FirebaseMessagingReceiver.kt
--- a/presentaion/src/main/java/com/madrasty/app/player/notification/FirebaseMessagingReceiver.kt	
+++ b/presentaion/src/main/java/com/madrasty/app/player/notification/FirebaseMessagingReceiver.kt	
@@ -18,6 +18,8 @@
 import com.madrasty.app.utils.Const
 import com.madrasty.app.utils.errorHanldling.CrashHandler
 import timber.log.Timber
+import zendesk.android.ZendeskCredentials
+import zendesk.chat.PushData
 import zendesk.messaging.android.push.PushNotifications
 import zendesk.messaging.android.push.PushNotifications.updatePushNotificationToken
 import zendesk.messaging.android.push.PushResponsibility
@@ -29,6 +31,9 @@
 
 class FirebaseMessagingReceiver : FirebaseMessagingService() {
 
+    companion object userStatus  {
+        var status = 2
+    }
     var mCotext: Context? = null
     override fun onMessageReceived(remoteMessage: RemoteMessage) {
         super.onMessageReceived(remoteMessage)
@@ -37,7 +42,13 @@
         when (responsibility) {
             PushResponsibility.MESSAGING_SHOULD_DISPLAY -> {
                 // This push belongs to Messaging and the SDK is able to display it to the end user
-                PushNotifications.displayNotification(context = this, messageData = remoteMessage.data)
+                if (userStatus.status ==1)
+                {
+                    ZendeskCredentials.fromQuery(remoteMessage.data[])
+                    PushNotifications.displayNotification(context = this, messageData = remoteMessage.data)
+                    val pushData: PushData =
+                        pushNotificationsProvider.processPushNotification(remoteMessage.data)
+                }
             }
             PushResponsibility.MESSAGING_SHOULD_NOT_DISPLAY -> {
                 // This push belongs to Messaging but it should not be displayed to the end user
Index: presentaion/src/main/java/com/madrasty/app/MadrastyApplication.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.madrasty.app\r\n\r\nimport android.app.Activity\r\nimport android.app.Application\r\nimport android.os.Build\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.view.Gravity\r\nimport androidx.fragment.app.FragmentActivity\r\nimport androidx.lifecycle.Lifecycle\r\nimport androidx.lifecycle.OnLifecycleEvent\r\nimport com.facebook.FacebookSdk\r\nimport com.facebook.FacebookSdk.sdkInitialize\r\nimport com.facebook.appevents.AppEventsLogger\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics\r\nimport com.madrasty.app.di.component.AppComponent\r\nimport com.madrasty.app.di.component.DaggerAppComponent\r\nimport com.madrasty.app.extensions.setLocal\r\nimport com.madrasty.app.player.notification.MadrastyNotificationManager\r\nimport com.madrasty.app.utils.Const\r\nimport com.thecode.aestheticdialogs.*\r\n\r\nimport io.sentry.SentryLevel\r\nimport io.sentry.android.core.SentryAndroid\r\nimport io.sentry.android.timber.SentryTimberIntegration\r\nimport timber.log.Timber\r\nimport zendesk.android.Zendesk\r\nimport zendesk.android.events.ZendeskEvent\r\nimport zendesk.android.events.ZendeskEventListener\r\nimport zendesk.logger.Logger\r\nimport zendesk.messaging.android.Messaging\r\n//import zendesk.support.Support\r\n\r\n\r\nclass MadrastyApplication : Application() {\r\n\r\n    lateinit var appComponent: AppComponent\r\n    var message: String = \"\"\r\n    var isDisplay: Boolean = false\r\n    var isRunning: Boolean = false\r\n\r\n    companion object {\r\n        fun get(activity: FragmentActivity): MadrastyApplication {\r\n            return activity.application as MadrastyApplication\r\n        }\r\n        var isBackground: Boolean = true\r\n    }\r\n\r\n\r\n    private var mCurrentActivity: Activity? = null\r\n    fun getCurrentActivity(): Activity? {\r\n        return mCurrentActivity\r\n    }\r\n\r\n    fun setCurrentActivity(mCurrentActivity: Activity?) {\r\n        this.mCurrentActivity = mCurrentActivity\r\n    }\r\n\r\n\r\n    fun setupInjection() {\r\n        appComponent = DaggerAppComponent.factory().create(this)\r\n    }\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        setupInjection()\r\n        FirebaseCrashlytics.getInstance().setCrashlyticsCollectionEnabled(!BuildConfig.DEBUG)\r\n        Timber.plant(Timber.DebugTree())\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            MadrastyNotificationManager.createMainNotificationChannel(applicationContext)\r\n        }\r\n\r\n        sdkInitialize(applicationContext)\r\n        AppEventsLogger.activateApp(this);\r\n\r\n        setLocal()\r\n\r\n        setUpZendisk()\r\n        setUpSentryLog()\r\n    }\r\n\r\n    private fun setUpSentryLog() {\r\n        SentryAndroid.init(this) { options ->\r\n            if (BuildConfig.DEBUG) {\r\n                options.addIntegration(\r\n                    SentryTimberIntegration(\r\n                        minEventLevel = SentryLevel.ERROR,\r\n                        minBreadcrumbLevel = SentryLevel.INFO\r\n                    )\r\n                )\r\n            } else {\r\n                Timber.plant(Timber.DebugTree())\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private fun initHandeler() {\r\n        isRunning = true\r\n        if (isDisplay)\r\n            showAestheticDialog(message)\r\n        Handler(Looper.getMainLooper()).postDelayed({\r\n            if (isDisplay) {\r\n                initHandeler()\r\n            }\r\n\r\n        }, Const.General.UPDATE_TOKEN_MASSAGE_TIME)\r\n    }\r\n\r\n    private fun setUpZendisk() {\r\n        Messaging.initialize(\r\n            context = this,\r\n            channelKey = Const.ZendeskConstants.CHANNEL_KEY,\r\n            successCallback = {\r\n                Timber.d(\"IntegrationApplication\".plus(\"Initialization successful\"))\r\n            },\r\n            failureCallback = { cause ->\r\n                // Tracking the cause of exceptions in your crash reporting dashboard will help to triage any unexpected failures in production\r\n                Timber.d(\"IntegrationApplication\".plus(\"Initialization failed \").plus(cause))\r\n            }\r\n        )\r\n\r\n        Logger.setLoggable(true)\r\n        Zendesk.instance.addEventListener(zendeskEventListener)\r\n        Timber.d(\"zendesklog counted massages ${Zendesk.instance.messaging.getUnreadMessageCount()}\")\r\n    }\r\n\r\n    // To create and use the event listener:\r\n    val zendeskEventListener: ZendeskEventListener = ZendeskEventListener {\r\n            zendeskEvent -> when (zendeskEvent) {\r\n        is ZendeskEvent.UnreadMessageCountChanged ->{\r\n            // Your custom action...\r\n            Timber.d(\"zendesklog UnreadMessageCountChanged $zendeskEvent\")\r\n        }\r\n        is ZendeskEvent.AuthenticationFailed -> {\r\n            Timber.d(\"zendesklog AuthenticationFailed $zendeskEvent\")\r\n            // Your custom action...\r\n        }\r\n        else -> {\r\n            Timber.d(\"zendesklog else $zendeskEvent\")\r\n            // Default branch for forward compatibility with Zendesk SDK and its `ZendeskEvent` expansion\r\n        }\r\n    }\r\n    }\r\n    fun showMassageToken(message: String, isDisplay: Boolean) {\r\n\r\n        this.isDisplay = isDisplay\r\n        this.message = message\r\n\r\n        if (!isRunning)\r\n            initHandeler()\r\n    }\r\n\r\n    fun showAestheticDialog(message: String) {\r\n        getCurrentActivity()?.let {\r\n            AestheticDialog.Builder(it, DialogStyle.RAINBOW, DialogType.WARNING)\r\n                .setTitle(message)\r\n                .setMessage(\"\")\r\n                .setCancelable(false)\r\n                .setGravity(Gravity.TOP)\r\n                .setDuration(Const.General.UPDATE_TOKEN_MASSAGE_TIME_DULATION)\r\n                .setAnimation(DialogAnimation.SHRINK)\r\n                .setOnClickListener(object : OnDialogClickListener {\r\n                    override fun onClick(dialog: AestheticDialog.Builder) {\r\n                        dialog.dismiss()\r\n                    }\r\n                })\r\n                .show()\r\n        }\r\n\r\n    }\r\n    @OnLifecycleEvent(Lifecycle.Event.ON_STOP)\r\n    fun onAppBackgrounded() {\r\n        isBackground = true\r\n    }\r\n\r\n    @OnLifecycleEvent(Lifecycle.Event.ON_START)\r\n    fun onAppForegrounded() {\r\n        isBackground = false\r\n    }\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/presentaion/src/main/java/com/madrasty/app/MadrastyApplication.kt b/presentaion/src/main/java/com/madrasty/app/MadrastyApplication.kt
--- a/presentaion/src/main/java/com/madrasty/app/MadrastyApplication.kt	
+++ b/presentaion/src/main/java/com/madrasty/app/MadrastyApplication.kt	
@@ -25,9 +25,11 @@
 import io.sentry.android.timber.SentryTimberIntegration
 import timber.log.Timber
 import zendesk.android.Zendesk
+import zendesk.android.ZendeskCredentials
 import zendesk.android.events.ZendeskEvent
 import zendesk.android.events.ZendeskEventListener
 import zendesk.logger.Logger
+import zendesk.messaging.android.DefaultMessagingFactory
 import zendesk.messaging.android.Messaging
 //import zendesk.support.Support
 
@@ -108,16 +110,30 @@
     }
 
     private fun setUpZendisk() {
-        Messaging.initialize(
+        Zendesk.initialize(
             context = this,
             channelKey = Const.ZendeskConstants.CHANNEL_KEY,
             successCallback = {
                 Timber.d("IntegrationApplication".plus("Initialization successful"))
+
+
+                Zendesk.instance.loginUser(jwt = "WIS_Xc2SxpiLe6ZWGFXzBDvJCSxjaW-nSVbrTb_9p30jsPMHGpNvrVvNiyrb0niVTArryTVG4CrdNAym0uMCYw",
+                    successCallback = { user ->
+
+                        Timber.d( " zendisk user info \n " +
+                                "externalId = ${user.externalId} , id =  ${user.id} ")
+                    },
+                    failureCallback = { error ->
+                        Timber.d( " zendisk user error \n " +
+                                "error = $error  ")
+                    }
+                )
             },
             failureCallback = { cause ->
                 // Tracking the cause of exceptions in your crash reporting dashboard will help to triage any unexpected failures in production
                 Timber.d("IntegrationApplication".plus("Initialization failed ").plus(cause))
-            }
+            },
+            messagingFactory = DefaultMessagingFactory()
         )
 
         Logger.setLoggable(true)
